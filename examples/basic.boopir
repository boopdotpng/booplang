@declare print(ptr) ; supports char[] and Strings eventually
function factorial(r1: i32) -> i32
L1:
    cmp r1, 0
    br eq, r1, 0, L2, L3   ; directly branch based on condition

L2:
    r2: i32 = 1
    br L4

L3:
    r3: i32 = r1 - 1
    call factorial, r3 -> r4
    r5: i32 = r1 * r4
    br L4

L4:
    r6: i32 = phi(r2, L2, r5, L3)
    ret r6
end function

function main(argc: i32, argv: ptr) -> void
L1:
    r1: i32 = 5
    call factorial, r1 -> r2
    print r2

    ; first loop: for i = 1 to 10
    r3: i32 = 1
    br L2

L2:
    r4: i32 = phi(r3, L1, r6, L2)
    cmp r4, 10
    br ge, r4, 10, L3, L5

L5:
    print r4
    r6: i32 = r4 + 1
    br L2

L3:
    ; second loop: for i = 1.0 to 6.0
    r7: f32 = 1.0
    br L4

L4:
    r8: f32 = phi(r7, L3, r10, L4)
    cmp r8, 6.0
    br ge, r8, 6.0, L5, L6

L6:
    r9: f32 = r8 + 1.0
    print r9
    r10: f32 = r8 + 0.5
    br L4

L5:
    r11: ptr = alloc 14    ; heap allocation for string
    store r11, "hello, world"
    print r11
    free r11
end function
