function factorial(r1: i32) -> i32
L1:
    cmp r1, 0
    beq r1, L2
    jmp L3

L2:
    r2: i32 = 1
    jmp L4

L3:
    r2: i32 = r1 - 1
    call factorial, r2 -> r2    ; recursive call result in r2
    r2: i32 = r1 * r2
    jmp L4

L4:
    r3: i32 = phi(r2 from L2, r2 from L3)
    ret r3
end function

function main(argc: i32, argv: ptr) -> void
L1:
    r1: i32 = 5
    call factorial, r1 -> r2
    print r2

    ; first loop: for i = 1 to 10
    r1: i32 = 1           ; initialize loop counter
    jmp L2

L2:
    r1: i32 = phi(1, r1 from loop body)   ; phi node for loop counter
    cmp r1, 10
    bge r1, L3
    print r1
    r1: i32 = r1 + 1
    jmp L2

L3:
    ; second loop: for i = 1.0 to 6.0
    r1: f32 = 1.0         ; initialize float loop counter
    jmp L4

L4:
    r1: f32 = Ï†(1.0, r1 from loop body)   ; phi node for float loop counter
    cmp r1, 6.0
    bge r1, L5
    print r1 + 1.0
    r1: f32 = r1 + 0.5
    jmp L4

L5:
    r1: ptr = alloc 14    ; allocate space for "hello, world\0"
    store r1, "hello, world"
    print r1
    free r1
end function
